package com.hcv.service.impl;

import com.hcv.constant.StatusResearchConst;
import com.hcv.converter.IResearchMapper;
import com.hcv.dto.StatusResearch;
import com.hcv.dto.SystemVariablesEnum;
import com.hcv.dto.TypeTeacherEnum;
import com.hcv.dto.request.*;
import com.hcv.dto.response.ResearchDTO;
import com.hcv.dto.response.ResearchResponse;
import com.hcv.dto.response.ResearchShowToRegistrationResponse;
import com.hcv.dto.response.ShowAllResponse;
import com.hcv.entity.*;
import com.hcv.exception.AppException;
import com.hcv.exception.ErrorCode;
import com.hcv.repository.*;
import com.hcv.repository.impl.ResearchRepositoryImpl;
import com.hcv.service.IJobTeacherDetailService;
import com.hcv.service.IResearchService;
import com.hcv.service.IResearchTeacherService;
import com.hcv.service.IUserService;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.text.Normalizer;
import java.util.*;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class ResearchService implements IResearchService {

    ITeacherRepository teacherRepository;
    IResearchRepository researchRepository;
    ResearchRepositoryImpl researchRepositoryImpl;
    IResearchMapper mapper;
    ITypeTeacherRepository typeTeacherRepository;
    ISystemVariablesRepository systemVariablesRepository;
    IResearchTeacherRepository researchTeacherRepository;
    IStudentRepository studentRepository;
    IUserService userService;
    IUserRepository userRepository;
    IJobTeacherDetailService jobTeacherDetailService;
    ICouncilRepository councilRepository;
    IResearchTeacherService researchTeacherService;

    @Override
    @Transactional
    public List<ResearchDTO> insertFromFile(ResearchInsertFromFileInput researchInsertFromFileInput) {
        String creatorId = userService.getClaimsToken().get("sub").toString();
        Teacher creator = teacherRepository.findById(creatorId)
                .orElseThrow(() -> new AppException(ErrorCode.TEACHER_NOT_EXISTED));
        TypeTeacher typeTeacher = typeTeacherRepository.findByCode(TypeTeacherEnum.INSTRUCTOR.name())
                .orElseThrow(() -> new AppException(ErrorCode.TYPE_TEACHER_INVALID));
        List<ResearchDTO> response = researchInsertFromFileInput.getResearches().stream()
                .map(researchInput -> this.insert(researchInput, creator, typeTeacher))
                .toList();

        JobTeacherDetail jobTeacherDetail = jobTeacherDetailService.findJobTeacherDetailId(creator.getJobTeacherDetails());
        jobTeacherDetailService.updateQuantityCompleted(jobTeacherDetail, response.size(), true);

        return response;
    }

    @Override
    public ResearchDTO insert(ResearchInput researchInput, Teacher creator, TypeTeacher typeTeacher) {
        SystemVariable stage = systemVariablesRepository.findByCode(SystemVariablesEnum.STAGE.name())
                .orElseThrow(() -> new AppException(ErrorCode.SYSTEM_VARIABLE_INVALID));
        SystemVariable schoolYear = systemVariablesRepository.findByCode(SystemVariablesEnum.SCHOOL_YEAR.name())
                .orElseThrow(() -> new AppException(ErrorCode.SYSTEM_VARIABLE_INVALID));

        researchInput.setCode(this.generateResearchCode(researchInput.getName(), stage.getValue(), schoolYear.getValue()));
        Research research = mapper.toEntity(researchInput);
        research.setSchoolYear(schoolYear.getValue());
        research.setStage(stage.getValue());

        List<Teacher> teachers = new ArrayList<>();
        teachers.add(creator);
        if (!researchInput.getSubInstructorId().isBlank() && !researchInput.getSubInstructorId().equals(creator.getId())) {
            Teacher subInstructor = teacherRepository.findById(researchInput.getSubInstructorId())
                    .orElseThrow(() -> new AppException(ErrorCode.TEACHER_NOT_EXISTED));
            teachers.add(subInstructor);
        }

        research.setSubject(creator.getSubject());

        research.setStatus(StatusResearch.valueOf(StatusResearchConst.PENDING_APPROVE));
        research = researchRepository.save(research);

        List<ResearchTeacher> researchTeachers = new ArrayList<>();
        for (Teacher teacher : teachers) {
            ResearchTeacher researchTeacher = new ResearchTeacher();
            researchTeacher.setId(new ResearchTeacherId(teacher.getId(), research.getId()));
            researchTeacher.setTeacher(teacher);
            researchTeacher.setResearch(research);
            if (!creator.getId().equals(teacher.getId())) {
                typeTeacher = typeTeacherRepository.findByCode(TypeTeacherEnum.SUB_INSTRUCTOR.name())
                        .orElseThrow(() -> new AppException(ErrorCode.TYPE_TEACHER_INVALID));
            }
            researchTeacher.setTypeTeacher(typeTeacher);
            researchTeachers.add(researchTeacher);
        }
        researchTeacherRepository.saveAll(researchTeachers);

        return mapper.toDTO(research);
    }

    @Override
    @Transactional
    public ResearchDTO update(String oldResearchId, ResearchUpdateInput newResearchUpdateInput) {
        Research research = researchRepository.findById(oldResearchId)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));

        String currentUserId = userService.getClaimsToken().get("sub").toString();
        boolean isCreator = researchTeacherRepository.
                isTeacherValidWithTypeTeacherInResearch(currentUserId, research.getId(), TypeTeacherEnum.INSTRUCTOR.name());
        if (!isCreator) {
            throw new AppException(ErrorCode.UNAUTHORIZED);
        }

        if (!newResearchUpdateInput.getSubInstructorId().isBlank() &&
                !newResearchUpdateInput.getSubInstructorId().equals(currentUserId)
        ) {
            Teacher oldSubInstructor = research.getResearchTeachers().stream()
                    .filter(teacher ->
                            teacher.getTypeTeacher().getCode().equals(TypeTeacherEnum.SUB_INSTRUCTOR.name()))
                    .map(ResearchTeacher::getTeacher)
                    .findFirst()
                    .orElse(null);

            if (oldSubInstructor != null && !oldSubInstructor.getId().equals(newResearchUpdateInput.getSubInstructorId())) {
                ResearchTeacher researchTeacher = research.getResearchTeachers().stream()
                        .filter(teacher ->
                                teacher.getTypeTeacher().getCode().equals(TypeTeacherEnum.SUB_INSTRUCTOR.name())
                        )
                        .findFirst()
                        .orElseThrow(() -> new AppException(ErrorCode.INVALID_KEY));

                Teacher subInstructor = teacherRepository.findById(newResearchUpdateInput.getSubInstructorId())
                        .orElseThrow(() -> new AppException(ErrorCode.TEACHER_NOT_EXISTED));

                assert researchTeacher != null;
                researchTeacher.setTeacher(subInstructor);
                researchTeacherRepository.save(researchTeacher);
            }
        }

        research.setCode(this.generateResearchCode(research.getName(), research.getCode(), research.getSchoolYear()));

        research = researchRepository.save(research);

        return mapper.toDTO(research);
    }

    @Override
    public ResearchDTO markApproved(String id) {
        Research research = researchRepository.findById(id)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));

        research.setStatus(StatusResearch.valueOf(StatusResearchConst.APPROVED));
        researchRepository.save(research);

        return mapper.toDTO(research);
    }


    @Override
    public void delete(String[] ids) {
        List<Research> researchList = researchRepository.findAllById(Arrays.asList(ids)).stream()
                .filter(Objects::nonNull)
                .distinct()
                .toList();

        researchList.forEach(researchEntity ->
                researchEntity.setStatus(StatusResearch.valueOf(StatusResearchConst.DELETED)));

        String currentUserId = userService.getClaimsToken().get("sub").toString();
        Teacher teacher = teacherRepository.findById(currentUserId)
                .orElseThrow(() -> new AppException(ErrorCode.TEACHER_NOT_EXISTED));

        JobTeacherDetail jobTeacherDetail = jobTeacherDetailService.findJobTeacherDetailId(teacher.getJobTeacherDetails());
        jobTeacherDetailService.updateQuantityCompleted(jobTeacherDetail, researchList.size(), false);

        researchRepository.saveAll(researchList);
    }

    @Override
    public ResearchDTO findOneById(String id) {
        Research research = researchRepository.findById(id)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));
        return mapper.toDTO(research);
    }

    @Override
    public ResearchResponse showDetail(String id) {
        Research research = researchRepository.findById(id)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));

        if (research.getStatus().equals(StatusResearch.valueOf(StatusResearchConst.ASSIGNED))) {
            return mapper.toShowDTOAfterApproved(research);
        }

        return mapper.toShowDTO(research);

    }

    @Override
    public ShowAllResponse<ResearchResponse> showAllMyResearch(ShowAllRequest showAllRequest) {
        String currentUserId = userService.getClaimsToken().get("sub").toString();

        Pageable paging = PageRequest.of(
                showAllRequest.getCurrentPage() - 1,
                showAllRequest.getLimit(),
                Sort.by(Sort.Direction
                        .fromString(showAllRequest.getOrderDirection()), showAllRequest.getOrderBy())
        );

        Page<Research> researchEntityList = researchRepository.findByResearchTeachers_Teacher_Id(currentUserId, paging);
        List<ResearchResponse> resultDTO = researchEntityList.getContent().stream()
                .map(mapper::toShowDTO)
                .toList();

        int page = showAllRequest.getCurrentPage();
        int limit = showAllRequest.getLimit();
        int totalElements = !resultDTO.isEmpty()
                ? this.countByTeachersId(currentUserId)
                : 0;
        int totalPages = (int) Math.ceil((1.0 * totalElements) / limit);

        return ShowAllResponse.<ResearchResponse>builder()
                .currentPage(page)
                .totalElements(totalElements)
                .totalPages(totalPages)
                .responses(resultDTO)
                .build();
    }

    @Override
    public ShowAllResponse<ResearchResponse> showAllToFeedback(ShowAllRequest showAllRequest) {
        List<StatusResearch> statusList = List.of(
                StatusResearch.valueOf(StatusResearchConst.PENDING_APPROVE)
        );

        Page<Research> researchEntityList = showAllBase(showAllRequest, statusList);
        List<ResearchResponse> resultDTO = researchEntityList.getContent().stream()
                .map(mapper::toShowDTO)
                .toList();

        int page = showAllRequest.getCurrentPage();
        int limit = showAllRequest.getLimit();
        int totalElements = !resultDTO.isEmpty()
                ? this.countByStatusInAndSubjectsId(statusList, resultDTO.getFirst().getSubject().getId())
                : 0;
        int totalPages = (int) Math.ceil((1.0 * totalElements) / limit);

        return ShowAllResponse.<ResearchResponse>builder()
                .currentPage(page)
                .totalElements(totalElements)
                .totalPages(totalPages)
                .responses(resultDTO)
                .build();
    }

    @Override
    public ShowAllResponse<ResearchShowToRegistrationResponse> showAllToRegistration(ShowAllRequest showAllRequest) {
        List<StatusResearch> statusList = List.of(
                StatusResearch.valueOf(StatusResearchConst.APPROVED)
        );

        Page<Research> researchEntityList = showAllBase(showAllRequest, statusList);
        List<ResearchShowToRegistrationResponse> resultDTO =
                researchEntityList.getContent().stream()
                        .map(mapper::toShowToRegistrationDTO)
                        .toList();

        int page = showAllRequest.getCurrentPage();
        int limit = showAllRequest.getLimit();
        int totalElements = !resultDTO.isEmpty()
                ? this.countByStatusInAndSubjectsId(statusList, resultDTO.getFirst().getSubject().getId())
                : 0;
        int totalPages = (int) Math.ceil((1.0 * totalElements) / limit);

        return ShowAllResponse.<ResearchShowToRegistrationResponse>builder()
                .currentPage(page)
                .totalElements(totalElements)
                .totalPages(totalPages)
                .responses(resultDTO)
                .build();
    }

    @Override
    public ShowAllResponse<ResearchShowToRegistrationResponse> showAllToApprovalProcessing(ShowAllRequest showAllRequest) {
        List<StatusResearch> statusList = List.of(
                StatusResearch.valueOf(StatusResearchConst.PENDING_APPROVE),
                StatusResearch.valueOf(StatusResearchConst.APPROVED)
        );

        Page<Research> researchEntityList = showAllBase(showAllRequest, statusList);
        List<ResearchShowToRegistrationResponse> resultDTO =
                researchEntityList.getContent().stream()
                        .map(mapper::toShowToRegistrationDTO)
                        .toList();

        int page = showAllRequest.getCurrentPage();
        int limit = showAllRequest.getLimit();
        int totalElements = !resultDTO.isEmpty()
                ? this.countByStatusInAndSubjectsId(statusList, resultDTO.getFirst().getSubject().getId())
                : 0;
        int totalPages = (int) Math.ceil((1.0 * totalElements) / limit);

        return ShowAllResponse.<ResearchShowToRegistrationResponse>builder()
                .currentPage(page)
                .totalElements(totalElements)
                .totalPages(totalPages)
                .responses(resultDTO)
                .build();
    }

    @Override
    public ResearchDTO cancelApproval(String id) {
        Research research = researchRepository.findById(id)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));

        if (research.getStatus().equals(StatusResearch.valueOf(StatusResearchConst.APPROVED))) {
            research.setStatus(StatusResearch.valueOf(StatusResearchConst.PENDING_APPROVE));
            research = researchRepository.save(research);
            return mapper.toDTO(research);
        }

        return mapper.toDTO(research);
    }

    @Override
    public void registerResearch(ResearchRegistrationInput researchRegistrationInput) {
        String currentUserID = userService.getClaimsToken().get("sub").toString();

        String researchID = researchRegistrationInput.getResearchID();
        Research research = researchRepository.findById(researchID)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));
        if (research.getStatus().name().equals("AS")) {
            throw new AppException(ErrorCode.RESEARCH_HAS_BEEN_ASSIGNED);
        }

        Student student = studentRepository.findById(currentUserID)
                .orElseThrow(() -> new AppException(ErrorCode.STUDENT_NOT_EXIST));
        if (student.getGroup() == null) {
            throw new AppException(ErrorCode.STUDENT_HAS_NOT_GROUP);
        }
        if (student.getGroup().getResearch() != null) {
            throw new AppException(ErrorCode.STUDENT_EXISTED_IN_OTHER_RESEARCH);
        }
        int minMemberRequired = research.getMinMembers();
        int membersInGroup = student.getGroup().getStudents().size();
        if (membersInGroup < minMemberRequired) {
            throw new AppException(ErrorCode.GROUP_NOT_ENOUGH_MEMBER_REQUIRED);
        }

        research.setGroup(student.getGroup());
        research.setStatus(StatusResearch.valueOf(StatusResearchConst.ASSIGNED));
        researchRepository.save(research);
    }

    @Override
    public void cancelRegistrationResearch(ResearchCancelRegistrationInput researchCancelRegistrationInput) {
        String researchID = researchCancelRegistrationInput.getResearchID();
        Research research = researchRepository.findById(researchID)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));

        research.getGroup().setResearch(null);
        research.setGroup(null);

        research.setStatus(StatusResearch.valueOf(StatusResearchConst.APPROVED));
        researchRepository.save(research);
    }

    @Override
    public int countByStatusInAndSubjectsId(Collection<StatusResearch> statuses, String id) {
        return (int) researchRepository.countByStatusInAndSubject_Id(statuses, id);
    }

    @Override
    public int countByTeachersId(String id) {
        return (int) researchRepository.countByResearchTeachers_Teacher_Id(id);
    }

    private String generateResearchCode(String name, String stage, String schoolYear) {
        StringBuilder code = new StringBuilder();
        code.append("KS");

        code.append("Đ");
        code.append(stage);

        String[] schoolYears = schoolYear.split(("-"));
        code.append(schoolYears[0], 2, 4);
        code.append(schoolYears[1], 2, 4);

        String[] allLetterName = name.toUpperCase().split(" ");
        Arrays.stream(allLetterName).toList().forEach(l -> code.append(l, 0, 1));

        return Normalizer.normalize(code.toString(), Normalizer.Form.NFKD).replaceAll("\\p{M}", "");
    }

    private Page<Research> showAllBase(ShowAllRequest showAllRequest, List<StatusResearch> statusList) {
        String currentUserName = userService.getClaimsToken().get("username").toString();
        User user = userRepository.findByUsername(currentUserName)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NOT_EXISTED));

        String subjectId = user.getStudent() != null
                ? user.getStudent().getSubject().getId()
                : user.getTeacher().getSubject().getId();

        Pageable paging = PageRequest.of(
                showAllRequest.getCurrentPage() - 1,
                showAllRequest.getLimit(),
                Sort.by(Sort.Direction
                        .fromString(showAllRequest.getOrderDirection()), showAllRequest.getOrderBy())
        );

        return researchRepository.findByStatusInAndSubject_Id(statusList, subjectId, paging);
    }

    @Override
    public ShowAllResponse<ResearchResponse> searchCriteria(Integer page, Integer limit, String sortBy, String... search) {
        ShowAllResponse<Research> response = researchRepositoryImpl.searchCriteria(page, limit, sortBy, search);
        return ShowAllResponse.<ResearchResponse>builder()
                .currentPage(page)
                .totalPages(response.getTotalPages())
                .totalElements(response.getTotalElements())
                .responses(response.getResponses().stream().map(mapper::toShowDTO).toList())
                .build();
    }

    @Override
    public void updateThesisAdvisor(String researchId, String thesisAdvisorId) {
        String currentTeacherId = userService.getClaimsToken().get("sub").toString();
        boolean isCreator = researchTeacherRepository
                .isTeacherValidWithTypeTeacherInResearch(currentTeacherId, researchId, TypeTeacherEnum.INSTRUCTOR.name());
        if (!isCreator) {
            throw new AppException(ErrorCode.UNAUTHORIZED);
        }

        Research research = researchRepository.findById(researchId)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));
        Teacher thesisAdvisor = teacherRepository.findById(thesisAdvisorId)
                .orElseThrow(() -> new AppException(ErrorCode.TEACHER_NOT_EXISTED));

        ResearchTeacher researchTeacher = researchTeacherRepository.findByTypeTeacher_CodeAndResearch_Id(TypeTeacherEnum.THESIS_ADVISOR.name(), researchId)
                .orElse(null);
        if (researchTeacher != null) {
            researchTeacher.setTeacher(thesisAdvisor);
            researchTeacherRepository.save(researchTeacher);
        } else {
            researchTeacher = new ResearchTeacher();
            researchTeacher.setId(new ResearchTeacherId(thesisAdvisor.getId(), research.getId()));
            TypeTeacher typeTeacher = typeTeacherRepository.findByCode(TypeTeacherEnum.THESIS_ADVISOR.name())
                    .orElseThrow(() -> new AppException(ErrorCode.TYPE_TEACHER_INVALID));
            researchTeacher.setTypeTeacher(typeTeacher);
            researchTeacher.setTeacher(thesisAdvisor);
            researchTeacher.setResearch(research);
            researchTeacherRepository.save(researchTeacher);
        }
    }

    @Transactional
    @Override
    public void broughtToTheCouncil(String researchId) {
        String currentTeacherId = userService.getClaimsToken().get("sub").toString();
        boolean isCreator = researchTeacherRepository
                .isTeacherValidWithTypeTeacherInResearch(currentTeacherId, researchId, TypeTeacherEnum.INSTRUCTOR.name());
        if (!isCreator) {
            throw new AppException(ErrorCode.UNAUTHORIZED);
        }
        Research research = researchRepository.findById(researchId)
                .orElseThrow(() -> new AppException(ErrorCode.RESEARCH_NOT_EXISTED));

        Council council = councilRepository.findBySubject_id(research.getSubject().getId())
                .orElseThrow(() -> new AppException(ErrorCode.COUNCIL_NOT_EXISTED));

        TypeTeacher typeTeacher = typeTeacherRepository.findByCode(TypeTeacherEnum.COUNCIL.name())
                .orElseThrow(() -> new AppException(ErrorCode.TYPE_TEACHER_INVALID));

        researchTeacherService.insert(research, council.getTeachers().stream().toList(), typeTeacher);
    }
}
